#!/usr/bin/env python3
#
# Copyright Â© 2009-2014 The Caffeine Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import dbus
import logging
import argparse
import signal
import sys
from ewmh import EWMH
from gi.repository import GObject, Gtk, AppIndicator3 # had to install gir1.2-appindicator3-0.1

# Handle command-line arguments
parser = argparse.ArgumentParser(prog='caffeine', description='Prevent desktop idleness in full-screen mode')
parser.add_argument('-V', '--version', action='version', version='caffeine 2.7.2')
parser.parse_args()

ewmh = EWMH()

class Caffeine(GObject.GObject):

    def __init__(self):
        GObject.GObject.__init__(self)
        self.manualInhibited = False
        self.idlenessInhibited = False
        self.screenSaverCookie = None

        self._add_indicator()

        # Add hook for full-screen check (same interval as mplayer's heartbeat command)
        # FIXME: add capability to xdg-screensaver to report timeout
        GObject.timeout_add(30000, self._check_for_fullscreen)

    def _add_indicator(self):
        self.AppInd = AppIndicator3.Indicator.new("caffeine-cup-empty",
                                                  "caffeine",
                                                  AppIndicator3.IndicatorCategory.APPLICATION_STATUS)
        self.AppInd.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        self.AppInd.set_icon ("caffeine-cup-empty")

        self._build_indicator_menu(self.AppInd)

    def _build_indicator_menu(self, indicator):
        menu = Gtk.Menu()

        menu_item = Gtk.MenuItem("Toggle Screensaver")
        menu.append(menu_item)
        menu_item.connect("activate", self.on_toggle)
        menu_item.show()

        menu_item = Gtk.MenuItem("Quit")
        menu.append(menu_item)
        menu_item.connect("activate", self.on_quit)
        menu_item.show()

        indicator.set_menu(menu)

    def on_toggle(self, menuitem):
        self.manualInhibited = not self.manualInhibited
        self._check_for_fullscreen();

    def on_quit(self, menuitem):
        sys.exit(0)

    def _set_icon_disabled(self):
        self.AppInd.set_icon('caffeine-cup-empty')

    def _set_icon_enabled(self):
        self.AppInd.set_icon('caffeine-cup-full')

    def _check_for_fullscreen(self):
        win = ewmh.getActiveWindow()
        inhibit = False
        if win != None:
            try:
                inhibit = '_NET_WM_STATE_FULLSCREEN' in ewmh.getWmState(win, str=True)
            except:
                pass
        inhibit = inhibit or self.manualInhibited

        # If inhibition state has changed, take action
        if self.idlenessInhibited != inhibit:
            self.idlenessInhibited = inhibit

            bus = dbus.SessionBus()
            self.susuProxy = bus.get_object('org.freedesktop.ScreenSaver', '/org/freedesktop/ScreenSaver')
            self.iface = dbus.Interface(self.susuProxy, 'org.freedesktop.ScreenSaver')

            if inhibit:
                self.screenSaverCookie = self.iface.Inhibit('net.launchpad.caffeine', "Caffeine is inhibiting desktop idleness")
                self._set_icon_enabled()
                logging.info("Caffeine is inhibiting desktop idleness")
            else:
                if self.screenSaverCookie != None:
                    self.iface.UnInhibit(self.screenSaverCookie)
                self._set_icon_disabled();
                logging.info("Caffeine is no longer inhibiting desktop idleness")

        # Return True so timeout is rerun
        return True


# Set up and run
logging.basicConfig(level=logging.INFO)
signal.signal(signal.SIGINT, signal.SIG_DFL)
GObject.threads_init()
Caffeine()
Gtk.main()
